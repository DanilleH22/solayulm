import {
  require_react
} from "./chunk-E3WV3ANG.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/its-fine/dist/index.js
var o = __toESM(require_react());
var f = (() => {
  var e, t;
  return typeof window != "undefined" && (((e = window.document) == null ? void 0 : e.createElement) || ((t = window.navigator) == null ? void 0 : t.product) === "ReactNative");
})() ? o.useLayoutEffect : o.useEffect;
function i(e, t, r) {
  if (!e) return;
  if (r(e) === true) return e;
  let n = t ? e.return : e.child;
  for (; n; ) {
    const u = i(n, t, r);
    if (u) return u;
    n = t ? null : n.sibling;
  }
}
function l(e) {
  try {
    return Object.defineProperties(e, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch (t) {
    return e;
  }
}
var a = l(o.createContext(null));
var m = class extends o.Component {
  render() {
    return o.createElement(a.Provider, { value: this._reactInternals }, this.props.children);
  }
};
function c() {
  const e = o.useContext(a);
  if (e === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const t = o.useId();
  return o.useMemo(() => {
    for (const n of [e, e == null ? void 0 : e.alternate]) {
      if (!n) continue;
      const u = i(n, false, (d) => {
        let s = d.memoizedState;
        for (; s; ) {
          if (s.memoizedState === t) return true;
          s = s.next;
        }
      });
      if (u) return u;
    }
  }, [e, t]);
}
var p = Symbol.for("react.context");
var b = (e) => e !== null && typeof e == "object" && "$$typeof" in e && e.$$typeof === p;
function h() {
  const e = c(), [t] = o.useState(() => /* @__PURE__ */ new Map());
  t.clear();
  let r = e;
  for (; r; ) {
    const n = r.type;
    b(n) && n !== a && !t.has(n) && t.set(n, o.use(l(n))), r = r.return;
  }
  return t;
}
function x() {
  const e = h();
  return o.useMemo(
    () => Array.from(e.keys()).reduce(
      (t, r) => (n) => o.createElement(t, null, o.createElement(r.Provider, { ...n, value: e.get(r) })),
      (t) => o.createElement(m, { ...t })
    ),
    [e]
  );
}

export {
  i,
  m,
  c,
  x
};
//# sourceMappingURL=chunk-W45GCGNF.js.map
